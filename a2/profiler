#!/bin/bash

#! Seconds to store seconds prog has run - used to print second on the files
SECONDS=1
#! Variable to keep loop running, trap kill to end loop
RUN="Y"
MEM="gnu/mem"
GPU="gnu/gputemp"
USAGE="gnu/cpuusage"
CPU="gnu/cputemp"
CLOCK="gnu/cpuclock"
DIRECTORY="gnu"

#! overwrite files with empty
createFiles() {
    mkdir -p $DIRECTORY
    echo -n '' | tee $MEM $GPU $USAGE $CPU $CLOCK
}

#! get temps and use trim and sed to format the value appropriately
cpuTemp() {
    echo -n -e "${SECONDS} ";
    bc -l <<< "scale=2; ($(cat /sys/devices/virtual/thermal/thermal_zone0/temp)/1000)"
} >> "$CPU"

gpuTemp() {
    echo -n -e "${SECONDS} "
    vcgencmd measure_temp | sed 's/[^0-9.]*//g'
} >> "$GPU"

#! add seconds, clock speed and cpu usage
#! use awk to format appropriately and tail to remove unneeded rows
cpuClock() {
    echo -n -e "${SECONDS} "
    vcgencmd measure_clock arm | awk ' BEGIN { FS="=" } ; { printf("%.2f\n", $2 / 1000000000) }'
} >> "$CLOCK"

cpuUsage() {
    echo -n -e "${SECONDS} "
    mpstat | tail -n +4 | awk  '{print $3, $5, $6, $12}'
} >> "$USAGE"

#! save mem stats, removing any string and rounding to decimal with awk
checkMem() {
    echo -n -e "${SECONDS} "
    free -m  | grep ^Mem | awk -v c=1000 '{ for (i = 1; i <= NF; ++i ) $i /= c; print $3, $4, $6, $7 }'
} >> "$MEM"

#! trap the USR1 kill signal and run this method, which ends the loop
#! and will run any gnuscripts
killSignal() {
    RUN="N"
    gnuplot gnu.p
}

trap 'killSignal' USR1

#! initially create files, then run loop while the process is not killed
#! run all methods and sleep for 1 second between these
createFiles
while [ $RUN == "Y" ] 
do
    cpuTemp
    gpuTemp
    cpuClock
    cpuUsage
    checkMem
    sleep 1
done
